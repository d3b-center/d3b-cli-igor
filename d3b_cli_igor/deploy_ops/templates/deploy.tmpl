rm -rf .tmp
rm -rf .config
mkdir .tmp
cp -rf * .tmp/
export BRANCH_NAME=`git rev-parse --abbrev-ref HEAD`
git clone --depth=1 -b $TF_VAR_branch git@github.com:kids-first/$architecture_type-module.git .tmp/.standard
git clone --depth=1 -b master git@github.com:d3b-center/aws-infra-deployment.git .tmp/.deployment
cp -rf .tmp/.deployment/bin/* .tmp/
cp -rf .tmp/.standard/* .tmp/
cp -rf .tmp/.standard/.config .tmp/
cp .tmp/entrypoint.sh .tmp/.config/
rm -rf .tmp/.standard
chmod +x .tmp/*.sh
cp .tmp/entrypoint.sh .tmp/.config/
cp .tmp/account_info.json .tmp/.config/
cp -rf .tmp/smoke_tests .tmp/.config/
echo "$account_name"
echo "$region"

cd .tmp/.config/
echo "Architecture Type: ${architecture_type}"
if [[ "${architecture_type}" == "aws-ecs-service-type-1" ]]; then
        if [[ "${override_templates}" == "true" ]]; then
	    aws s3 cp s3://${TF_VAR_organization}-${AWS_ACCOUNT_ID}-${region}-${TF_VAR_environment}-secrets/${TF_VAR_projectName}/templates/ templates/ --recursive
	fi
	./setup_files --project $TF_VAR_projectName$TF_VAR_projectPrefix --region $region --account_name $account_name --environment $TF_VAR_environment --postfix $vpc_prefix --docker_image_type $TF_VAR_docker_image_type --internal_app $TF_VAR_internal_app 
	cd ../
	{% if mode == 'build' %}
	./deploy_dependencies.sh ${TF_VAR_projectName}${TF_VAR_projectPrefix} .config 'ecr'
	./build_standard.sh $account_name $region null $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type $TF_VAR_organization
	./publish_standard.sh $account_name $region $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type 
	{% else %}
	./${mode}_standard.sh $account_name $region $TF_VAR_environment $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type $TF_VAR_organization null
	{% endif %}
fi

if [[ "${architecture_type}" == "aws-ecs-service-existing-alb" ]]; then
	./setup_files --project $TF_VAR_projectName$TF_VAR_projectPrefix --region $region --account_name $account_name --environment $TF_VAR_environment --postfix $vpc_prefix --docker_image_type $TF_VAR_docker_image_type --internal_app $TF_VAR_internal_app  --alb_name $TF_VAR_alb_name
	cd ../
	{% if mode == 'destroy' %}
	./deploy_dependencies.sh $TF_VAR_projectName$TF_VAR_projectPrefix .config $TF_VAR_dependencies 
	./build_standard.sh $account_name $region null $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type $TF_VAR_organization
	./publish_standard.sh $account_name $region $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type 
	{% endif %}
	./${mode}_standard.sh $account_name $region $TF_VAR_environment $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type $TF_VAR_organization null
fi

if [[ "${architecture_type}" == "aws-infra-ec2" ]]; then
	./setup_files --project $TF_VAR_projectName$TF_VAR_projectPrefix --region $region --account_name $account_name --environment $TF_VAR_environment --postfix $vpc_prefix --user_data "$TF_VAR_user_data"
	cd ../
	./${mode}_standard.sh $account_name $region $TF_VAR_environment $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type-module $TF_VAR_organization null
fi


if [ "${architecture_type}" == "aws-infra-lambda" ]; then
	igor generate-tf-module-files --project $TF_VAR_projectName$TF_VAR_projectPrefix --region $region --account_name $account_name --environment $TF_VAR_environment --module aws-infra-lambda-module
	cd ../
	./${mode}_standard.sh $account_name $region $TF_VAR_environment $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type-module $TF_VAR_organization null
fi

if [[ "${architecture_type}" == "aws-ecs-service-type-1" ]]; then
	aws ecs wait services-stable --cluster $organization-$vpc_prefix-$TF_VAR_environment-$region-ecs --services $TF_VAR_projectName$TF_VAR_projectPrefix --region $region 
fi
cd ../
rm -rf .tmp
aws ecs wait services-stable --cluster ${TF_VAR_organization}-apps-dev-${region}-ecs --services ${TF_VAR_projectName}${TF_VAR_projectPrefix}-${TF_VAR_environment} --region ${region}
