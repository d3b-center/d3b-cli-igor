rm -rf .tmp
rm -rf .tmp_deployment
rm -rf .config
mkdir .tmp
rsync -avr --exclude='.tmp' ./ .tmp/

export BRANCH_NAME=`git rev-parse --abbrev-ref HEAD`
git clone --depth=1 -b $TF_VAR_branch git@github.com:kids-first/$architecture_type-module.git .tmp_deployment/.standard
git clone --depth=1 -b master git@github.com:d3b-center/aws-infra-deployment.git .tmp_deployment/.deployment
cd .tmp_deployment
#Remove unnecessary files
rm -rf .standard/tests
rm -rf .standard/Jenkinsfile
rm -rf .standard/README.md
rm -rf .standard/LICENSE
rm -rf .standard/.git
rm -rf .deployment/.git
rm -rf .deployment/Jenksinfile
cd ../.tmp
#Link deployment scripts
ln -s ../.tmp_deployment/.deployment/bin/* ./
ln -s ../.tmp_deployment/.standard/* ./
ln -s ../.tmp_deployment/.standard/.config ./
#Copy account info
cp ../.tmp_deployment/.deployment/bin/account_info.json ../.tmp_deployment/.standard/.config/
cp -rf ../.tmp_deployment/.deployment/bin/entrypoint.sh .config/
cp -rf ../.tmp_deployment/.deployment/bin/smoke_tests .config/
chmod +x *.sh
echo "$account_name"
echo "$region"
cd .config

echo "Architecture Type: ${architecture_type}"
if [[ "${architecture_type}" == "aws-ecs-service-type-1" ]]; then
        if [[ "${TF_VAR_override_templates}" == "true" ]]; then
	    aws s3 cp s3://${TF_VAR_organization}-${AWS_ACCOUNT_ID}-${region}-${TF_VAR_environment}-secrets/${TF_VAR_projectName}/templates/ templates/ --recursive
	fi
	{% if mode == 'build' %}
	echo "Building $TF_VAR_projectName$TF_VAR_projectPrefix Container"
	if [[ ! -z "${TF_VAR_additional_container_ports}" ]]; then
	./setup_files --project $TF_VAR_projectName$TF_VAR_projectPrefix --region $region --account_name $account_name --environment prd --postfix $vpc_prefix --docker_image_type $TF_VAR_docker_image_type --internal_app $TF_VAR_internal_app --additional_container_ports $TF_VAR_additional_container_ports
	else
	./setup_files --project $TF_VAR_projectName$TF_VAR_projectPrefix --region $region --account_name $account_name --environment prd --postfix $vpc_prefix --docker_image_type $TF_VAR_docker_image_type --internal_app $TF_VAR_internal_app 
	fi
	cd ../
	./deploy_dependencies.sh ${TF_VAR_projectName}${TF_VAR_projectPrefix} .config 'ecr'
	./build_standard.sh $account_name $region null $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type $TF_VAR_organization $TF_VAR_external_github_repo $TF_VAR_external_github_repo_branch
	./publish_standard.sh $account_name $region $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type 
	{% else %}
	echo "Deploying"
	if [[ ! -z "${TF_VAR_additional_container_ports}" ]]; then
	./setup_files --project $TF_VAR_projectName$TF_VAR_projectPrefix --region $region --account_name $account_name --environment prd --postfix $vpc_prefix --docker_image_type $TF_VAR_docker_image_type --internal_app $TF_VAR_internal_app --additional_container_ports $TF_VAR_additional_container_ports
	else
	./setup_files --project $TF_VAR_projectName$TF_VAR_projectPrefix --region $region --account_name $account_name --environment prd --postfix $vpc_prefix --docker_image_type $TF_VAR_docker_image_type --internal_app $TF_VAR_internal_app 
	fi
	cd ../
	./${mode}_standard.sh $account_name $region $TF_VAR_environment $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type $TF_VAR_organization null
	{% endif %}
fi

if [[ "${architecture_type}" == "aws-ecs-service-existing-alb" ]]; then
	{% if mode == 'build' %}
	./setup_files --project $TF_VAR_projectName$TF_VAR_projectPrefix --region $region --account_name $account_name --environment prd --postfix $vpc_prefix --docker_image_type $TF_VAR_docker_image_type --internal_app $TF_VAR_internal_app 
	cd ../
	./deploy_dependencies.sh $TF_VAR_projectName$TF_VAR_projectPrefix .config ecr 
	./build_standard.sh $account_name $region $TF_VAR_environment $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type $TF_VAR_organization $TF_VAR_external_github_repo $TF_VAR_external_github_repo_branch
	./publish_standard.sh $account_name $region $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type 
	{% else %}
	./setup_files --project $TF_VAR_projectName$TF_VAR_projectPrefix --region $region --account_name $account_name --environment $TF_VAR_environment --postfix $vpc_prefix --docker_image_type $TF_VAR_docker_image_type --internal_app $TF_VAR_internal_app  --alb_name $TF_VAR_alb_name
	cd ../
	./${mode}_standard.sh $account_name $region $TF_VAR_environment $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type $TF_VAR_organization null
         {% endif %}

fi
if [[ "${architecture_type}" == "aws-infra-ec2" ]]; then
	./setup_files --project $TF_VAR_projectName$TF_VAR_projectPrefix --region $region --account_name $account_name --environment $TF_VAR_environment --postfix $vpc_prefix --user_data "$TF_VAR_user_data"
	cd ../
	./${mode}_standard.sh $account_name $region $TF_VAR_environment $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type-module $TF_VAR_organization null
fi


if [ "${architecture_type}" == "aws-infra-lambda" ]; then
	igor generate-tf-module-files --project $TF_VAR_projectName$TF_VAR_projectPrefix --region $region --account_name $account_name --environment $TF_VAR_environment --module aws-infra-lambda-module
	cd ../
	./${mode}_standard.sh $account_name $region $TF_VAR_environment $TF_VAR_projectName$TF_VAR_projectPrefix '.config' $architecture_type-module $TF_VAR_organization null
fi

if [[ "${architecture_type}" == "aws-ecs-service-type-1" && "${mode}" == "deploy" ]]; then
	aws ecs wait services-stable --cluster $TF_VAR_organization-apps-$TF_VAR_environment-$region-ecs --services $TF_VAR_projectName$TF_VAR_projectPrefix-$TF_VAR_environment --region $region 
fi
cd ../
rm -rf .tmp
rm -rf .tmp_deployment
